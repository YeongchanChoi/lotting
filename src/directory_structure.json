{
    "__files__": {
        "api.js": "// src/utils/api.js\nimport axios from \"axios\";\nconst path = \"http://localhost:8080\";\n// const path = \"http://3.38.181.18:8080\";\n\n// 고객 추가 페이지 새로운 아이디 받아오기\nexport const newIdGenerate = () => {\n  return axios\n    .get(`${path}/customers/nextId`)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\n// 파일 업로드 (파일명 변경 포함)\nexport const createFile = (file, custId) => {\n  const formData = new FormData();\n  const originalName = file.name;\n  const extension = originalName.split('.').pop();\n  const baseName = originalName.substring(0, originalName.lastIndexOf('.'));\n  const newFileName = `${custId}_${baseName}.${extension}`;\n  formData.append(\"file\", file, newFileName);\n  return axios.post(`${path}/files/upload`, formData, {\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  });\n};\n\nexport const downloadFile = async (id, filename) => {\n  try {\n    const response = await axios.get(`${path}/files/download`, {\n      params: { id, filename },\n      responseType: \"blob\",\n    });\n    const disposition = response.headers[\"content-disposition\"];\n    let fileName = \"downloaded_file\";\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    throw error;\n  }\n};\n\n// 고객 생성\nexport const createUser = (data) => {\n  return axios.post(`${path}/customers`, data);\n};\n\n// 고객 검색\nexport const fetchCustomers = (params) => {\n  return axios\n    .get(`${path}/customers/search`, { params })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error fetching customers:\", error);\n      throw error;\n    });\n};\n\n// 고객 삭제\nexport const deleteCustomer = (id) => {\n  return axios\n    .delete(`${path}/customers/${id}`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error deleting customer:\", error);\n      throw error;\n    });\n};\n\n// 고객 상세 조회\nexport const fetchCustomerById = (id) => {\n  return axios\n    .get(`${path}/customers/${id}`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error fetching customer:\", error);\n      throw error;\n    });\n};\n\n// 납부 전 차수 데이터 조회\nexport const fetchPendingPhases = async (userId) => {\n  try {\n    const response = await axios.get(`${path}/customers/${userId}/pending-phases`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching pending phases:\", error);\n    throw error;\n  }\n};\n\n// 납부 후 차수 데이터 조회\nexport const fetchCompletedPhases = async (userId) => {\n  try {\n    const response = await axios.get(`${path}/customers/${userId}/completed-phases`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching completed phases:\", error);\n    throw error;\n  }\n};\n\n// 특정 차수 데이터 조회\nexport const fetchPhaseData = (userid, chasu) => {\n  return axios\n    .get(`${path}/customers/${userid}/phases`)\n    .then((result) => {\n      const phases = result.data;\n      const phase = phases.find((p) => p.phaseNumber === parseInt(chasu, 10));\n      return phase;\n    })\n    .catch((error) => {\n      console.error(\"Error fetching phase data:\", error);\n      throw error;\n    });\n};\n\n// 특정 차수 데이터 업데이트\nexport const updatePhaseData = (phaseId, data) => {\n  return axios\n    .put(`${path}/phases/${phaseId}`, data)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error updating phase data:\", error);\n      throw error;\n    });\n};\n\n// 특정 차수 데이터 업데이트 (콜백 사용)\nexport const updatePhaseDataWithCallback = (phaseId, data, callback) => {\n  axios\n    .put(`${path}/phases/${phaseId}`, data)\n    .then(() => {\n      callback();\n    })\n    .catch((error) => {\n      console.error(\"Error updating phase data:\", error);\n    });\n};\n\n// 고객 Loan 데이터 조회\nexport const fetchLoanInit = (userid) => {\n  return axios\n    .get(`${path}/customers/${userid}/loan`)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error fetching loan data:\", error);\n      throw error;\n    });\n};\n\n// 고객 Loan 데이터 업데이트\nexport const fetchLoanUpdate = (userid, data, callback) => {\n  axios\n    .put(`${path}/customers/${userid}/loan`, data)\n    .then(() => {\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error updating loan data:\", error);\n    });\n};\n\n// 매니저 로그인\nexport const fetchLogin = (username, password) => {\n  return axios.post(`${path}/api/auth/signin`, {\n    username,\n    password,\n  });\n};\n\n// 매니저 회원가입\nexport const fetchSignup = (username, email, password, roles) => {\n  return axios.post(`${path}/api/auth/signup`, {\n    username,\n    email,\n    password,\n    roles,\n  });\n};\n\n// 고객 취소\nexport const cancelCustomer = (id) => {\n  return axios\n    .put(`${path}/customers/${id}/cancel`)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error cancelling customer:\", error);\n      throw error;\n    });\n};\n\n// 고객 정보 업데이트\nexport const updateUser = (id, data) => {\n  return axios\n    .put(`${path}/customers/${id}`, data)\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"Error updating user:\", error);\n      throw error;\n    });\n};\n\n// 연체료 조회\nexport const fetchLateFees = (name, number) => {\n  return axios\n    .get(`${path}/latefees`, {\n      params: {\n        name: name.length > 1 ? name : undefined,\n        number: number.length > 1 ? number : undefined,\n      },\n    })\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error fetching late fees:\", error);\n      throw error;\n    });\n};\n\n// 고객 ID 존재 여부 체크\nexport const checkIdExists = async (id) => {\n  try {\n    const response = await axios.get(`${path}/customers/${id}`);\n    return !!response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      return false;\n    }\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = (filename) => {\n  return axios\n    .delete(`${path}/files/delete`, { params: { filename } })\n    .then((response) => response.data)\n    .catch((error) => {\n      console.error(\"파일 삭제 오류:\", error);\n      throw error;\n    });\n};\n\n// 정계약 고객 수 조회\nexport const fetchContractedCustomers = async () => {\n  try {\n    const response = await axios.get(`${path}/customers/count/contracted`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching contracted customers count:\", error);\n    throw error;\n  }\n};\n\n// 완납 또는 연체 없는 고객 수 조회\nexport const fetchFullyPaidCustomers = async () => {\n  try {\n    const response = await axios.get(`${path}/customers/count/fullypaid`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching fully paid customers count:\", error);\n    throw error;\n  }\n};\n\n// format1 다운로드\nexport const downloadFormat1 = async (id) => {\n  try {\n    const response = await axios.get(`${path}/files/format1/${id}`, {\n      responseType: \"blob\",\n    });\n    let fileName = \"일반신청서.xlsx\";\n    const disposition = response.headers[\"content-disposition\"];\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading format1:\", error);\n    throw error;\n  }\n};\n\n// format2 다운로드\nexport const downloadFormat2 = async (id) => {\n  try {\n    const response = await axios.get(`${path}/files/format2/${id}`, {\n      responseType: \"blob\",\n    });\n    let fileName = \"일반부속서류.xlsx\";\n    const disposition = response.headers[\"content-disposition\"];\n    if (disposition && disposition.indexOf(\"filename=\") !== -1) {\n      const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n      const matches = filenameRegex.exec(disposition);\n      if (matches != null && matches[1]) {\n        fileName = matches[1].replace(/['\"]/g, \"\");\n      }\n    }\n    const blob = new Blob([response.data], {\n      type: response.headers[\"content-type\"],\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", fileName);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading format2:\", error);\n    throw error;\n  }\n};\n\n// ================ Deposit 관련 API ================ //\n\n// **추가**: 모든 고객의 입금내역(DepositList DTO) 전체를 조회하는 함수\nexport const fetchDepositList = async () => {\n  try {\n    const response = await axios.get(`${path}/depositlist`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit list:\", error);\n    throw error;\n  }\n};\n\n// 고객의 전체 입금내역 조회 (GET /deposit/customer/{userId})\nexport const fetchDepositHistoriesByCustomerId = async (userId) => {\n  try {\n    const response = await axios.get(`${path}/deposit/customer/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit histories:\", error);\n    throw error;\n  }\n};\n\n// 단일 입금내역 조회 (GET /deposit/{id})\nexport const fetchDepositHistory = async (depositId) => {\n  try {\n    const response = await axios.get(`${path}/deposit/${depositId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 생성 (POST /deposit)\nexport const createDepositHistory = async (data) => {\n  try {\n    const response = await axios.post(`${path}/deposit`, data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 수정 (PUT /deposit/{id})\nexport const updateDepositHistory = async (depositId, data) => {\n  try {\n    const response = await axios.put(`${path}/deposit/${depositId}`, data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating deposit history:\", error);\n    throw error;\n  }\n};\n\n// 입금내역 삭제 (DELETE /deposit/{id})\nexport const deleteDepositHistory = async (depositId) => {\n  try {\n    const response = await axios.delete(`${path}/deposit/${depositId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting deposit history:\", error);\n    throw error;\n  }\n};\n\n// JWT 토큰 포함 요청을 위한 Axios 인터셉터 설정\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// 특정 차수 데이터 부분 업데이트 (부담금, 업무대행비, 할인액, 면제액, 이동만)\nexport const updatePhaseDataPartial = (customerId, phaseNumber, data) => {\n  return axios\n    .put(`${path}/phases/customer/${customerId}/phase/${phaseNumber}/modify`, data)\n    .then((result) => result.data)\n    .catch((error) => {\n      console.error(\"Error updating phase partial data:\", error);\n      throw error;\n    });\n};\n",
        "atom.js": "import { atom } from \"recoil\";\n\nexport const userinfoState = atom({\n    key: 'userinfoState',\n    default: null,\n});\n\nexport const useridState = atom({\n    key: 'useridState',\n    default: null,\n})\n\nexport const searchnameState = atom({\n    key: 'searchnameState',\n    default: \"\",\n})\n\nexport const searchnumberState = atom({\n    key: 'searchnumberState',\n    default: \"\",\n});\n\nexport const searchtypeState = atom({\n    key: 'searchtypeState',\n    default: null,\n});\n\nexport const usernewState = atom ({\n    key: 'usernewState',\n    default: null\n})\n\nexport const chasuState = atom ({\n    key: 'chasuState',\n    default: null\n})\n",
        "categoryMapping.js": "// src/utils/categoryMapping.js\n\nconst categoryMapping = {\n    1: \"정계약\",\n    c: \"청약\",\n    j: \"정계약\",\n    r: \"수정\",\n    x: \"해지\",\n    x1: \"해지\",\n    p: \"업대\",\n    p1: \"업대\",\n    t: \"창준위\",\n    t1: \"창준위\",\n    g: \"지주\",\n  };\n  \n  export default categoryMapping;\n  ",
        "formatNumber.js": "// utils/formatNumber.js\nexport function formatNumberWithCommas(value) {\n    if (!value) return '';\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n  \n  export function removeCommas(value) {\n    if (!value) return '';\n    return value.toString().replace(/,/g, '');\n  }\n  ",
        "selector.js": "import { selector } from \"recoil\";\nimport { fetchNameSearch, fetchNumberSearch, fetchT, fetchUserinfo, fetchLoanInit, fetchChasuData, fetchCustomers, fetchCustomerById, fetchPhaseData } from \"./api\";\nimport { searchnameState, searchnumberState, useridState, searchtypeState, chasuState } from \"./atom\";\n\n//유저 검색\nexport const userinfoSelector = selector({ \n  key: \"userinfoSelector\",\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    if (!userid) {\n      return null;\n    }\n    try {\n      const data = await fetchCustomerById(userid);\n      return data;\n    } catch (error) {\n      console.error(\"userinfoSelector 오류:\", error);\n      throw error;\n    }\n  },\n});\n//유저 검색2\nexport const namesearchSelector = selector({\n  key: 'namesearchSelector',\n  get: async ({ get }) => {\n    const username = get(searchnameState);\n    const usernumber = get(searchnumberState);\n\n    try {\n      const params = {};\n      if (username) params.name = username;\n      if (usernumber) params.number = usernumber;\n\n      const data = await fetchCustomers(params);\n      return data;\n    } catch (error) {\n      console.error('namesearchSelector 오류:', error);\n      throw error;\n    }\n  },\n});\n\n\n/**\n * 사용자 대출 정보 셀렉터\n */\nexport const usermoneySelector = selector({\n  key: 'usermoneySelector',\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    if (userid) {\n      try {\n        const data = await fetchLoanInit(userid);\n        return data;\n      } catch (error) {\n        console.error('Error fetching loan data: ', error);\n        throw error;\n      }\n    }\n    return null;\n  }\n});\n\n\n/**\n * 사용자 차수(Phase) 정보 셀렉터\n */\nexport const userchasuSelector = selector({\n  key: 'userchasuSelector',\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    const chasu = get(chasuState);\n    if (userid && chasu) {\n      try {\n        const phase = await fetchPhaseData(userid, chasu);\n        return phase;\n      } catch (error) {\n        console.error('Error fetching phase data:', error);\n        throw error;\n      }\n    }\n    return null;\n  }\n\n  \n});\n//=======================================================================================\n\n\n\n"
    },
    "context": {
        "__files__": {
            "AuthContext.js": "'use client'\nimport React, { createContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('username');\n    if (token) {\n      setIsLoggedIn(true);\n      setUsername(user);\n    }\n  }, []);\n\n  const login = (username, token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('username', username);\n    setIsLoggedIn(true);\n    setUsername(username);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    setIsLoggedIn(false);\n    setUsername('');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, username, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"
        }
    },
    "hoc": {
        "__files__": {
            "withAuth.js": "// 'hoc/withAuth.js'\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nconst withAuth = (WrappedComponent) => {\n  return (props) => {\n    const router = useRouter();\n\n    useEffect(() => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        router.push(\"/login\");\n      }\n    }, []);\n\n    return <WrappedComponent {...props} />;\n  };\n};\n\nexport default withAuth;\n"
        }
    }
}