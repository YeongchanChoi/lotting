{
    "__files__": {
        "api.js": "import axios from \"axios\";\nconst path = \"http://localhost:8080\";\n\n\n\nexport const newIdGenerate = () => {\n  return axios\n    .get(path + \"/customers/nextId\")\n    .then((result) => {\n      return result.data; // 백엔드에서 Integer를 반환하므로 result.data가 관리번호입니다.\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\n\nexport const createFile = (files) => {\n  const formData = new FormData();\n  files.forEach((file) => {\n    formData.append(\"files\", file);\n  });\n\n  return axios.post(path + \"/files/upload\", formData, {\n    headers: { \"Content-Type\": \"multipart/form-data\", charset: \"utf-8\" },\n  });\n};\n\n\nexport const downloadFile = async (id, filename) => {\n  try {\n    const response = await axios.post(\n      path + \"/api/download\",\n      { id, filename },\n      {\n        responseType: \"blob\",\n      }\n    );\n\n    // 파일 다운로드\n    const name = response.headers[\"content-disposition\"]\n      .split(\"filename=\")[1]\n      .replace(/\"/g, \"\");\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", name);\n    link.style.cssText = \"display:none\";\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    // 오류 처리\n  }\n};\n\nexport const createUser = (data) => { // 고객 만들기 Customer\n  return axios.post(path + \"/customers\", data);\n};\n\nexport const updateUserinfo = (userid, data) => { // 고객 업데이트 Customer\n  if (data.fileinfo && data.fileinfo._id) {\n    delete data.fileinfo._id;\n  }\n  return axios\n    .put(path + \"/api/userinfo/\" + userid, data)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\nexport const fetchLogin = (username, password) => { // 매니저 로그인\n  return axios.post(path + \"/api/auth/signin\", {\n    username,\n    password,\n  });\n};\n\nexport const fetchSignup = (username, email, password, roles) => { // 매니저 회원가입\n  return axios.post(path + \"/api/auth/signup\", {\n    username,\n    email,\n    password,\n    roles,\n  });\n};\n\nexport const fetchUserinfo = (userid) => {\n  return axios.get(path + \"/customers/\" + userid).then((result) => {\n    return result.data;\n  });\n};\n\n\nexport const searchFinchasu = (userid) => { // Customer의 이미 납부된 Phase 불러오기\n  return axios\n    .get(path + \"/api/chasuinit/fin/\" + userid)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\nexport const searchPrechasu = (userid) => { // Customer의 아직 납부되지 않은 Phase 불러오기\n  return axios\n    .get(path + \"/api/chasuinit/pre/\" + userid)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error;\n    });\n};\n\n\nexport const fetchNameSearch = (username) => { //이름으로 Customer 찾기\n  return axios\n    .get(path + \"/api/searchname/\" + username)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.log(error);\n      throw error;\n    });\n};\n\n\nexport const fetchNumberSearch = (usernumber) => { //회원번호로 Customer 찾기\n  return axios\n    .get(`${path}/api/searchnumber/${usernumber}`)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.log(error);\n      throw error;\n    });\n};\n\n\nexport const deleteUser = (id) => { //Customer 삭제\n  return axios\n    .post(path + \"/api/deleteuser\", { id: id.toString() })\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.error(\"Error deleting user:\", error);\n      throw error;\n    });\n};\n\nexport const fetchLoanInit = (userid) => { //Customer 의 id로 Loan 항목 불러오기\n  return axios\n    .get(path + \"/api/chasuinit/loan/\" + userid)\n    .then((result) => {\n      return result.data;\n    })\n    .catch((error) => {\n      console.log(error);\n      throw error;\n    });\n};\n\nexport const fetchChasuData = (userid, chasu) => { // Customer\n  return axios\n    .get(path + \"/api/chasu/\" + userid + \"/\" + chasu)\n    .then((result) => {\n      return result.data[0];\n    })\n    .catch((error) => {\n      console.log(error);\n      throw error;\n    });\n};\n\nexport const fetchChasuUpdate = (userid, data, callback) => {\n  axios\n    .put(path + \"/api/chasuupdate/\" + userid, data)\n    .then(() => {\n      callback();\n    })\n    .catch((error) => {\n      console.error(\"Error updating data:\", error);\n    });\n};\n\nexport const fetchLoanUpdate = (userid, data, callback) => {\n  axios\n    .put(path + \"/api/loanupdate/\" + userid, data)\n    .then(() => {\n      callback();\n    })\n    .catch((error) => {\n      console.error(\"Error updating data: \", error);\n    });\n};\n",
        "atom.js": "import { atom } from \"recoil\";\n\nexport const userinfoState = atom({\n    key: 'userinfoState',\n    default: null,\n});\n\nexport const useridState = atom({\n    key: 'useridState',\n    default: null,\n})\n\nexport const searchnameState = atom({\n    key: 'searchnameState',\n    default: \"\",\n})\n\nexport const searchnumberState = atom({\n    key: 'searchnumberState',\n    default: \"\",\n});\n\nexport const searchtypeState = atom({\n    key: 'searchtypeState',\n    default: null,\n});\n\nexport const usernewState = atom ({\n    key: 'usernewState',\n    default: null\n})\n\nexport const chasuState = atom ({\n    key: 'chasuState',\n    default: null\n})\n",
        "categoryMapping.js": "// src/utils/categoryMapping.js\n\nconst categoryMapping = {\n    1: \"정계약\",\n    c: \"청약\",\n    j: \"정계약\",\n    r: \"수정\",\n    x: \"해지\",\n    x1: \"해지\",\n    p: \"업대\",\n    p1: \"업대\",\n    t: \"창준위\",\n    t1: \"창준위\",\n    g: \"지주\",\n  };\n  \n  export default categoryMapping;\n  ",
        "selector.js": "import { selector } from \"recoil\";\nimport { fetchNameSearch, fetchNumberSearch, fetchT, fetchUserinfo, fetchLoanInit, fetchChasuData } from \"./api\";\nimport { searchnameState, searchnumberState, useridState, searchtypeState, chasuState } from \"./atom\";\n\nexport const userinfoSelector = selector({\n    key: 'userinfoSelector',\n    get: async ({ get }) => {\n      const userid = get(useridState);\n      try {\n        const data = await fetchUserinfo(userid); \n        return data;\n      } catch (error) {\n        console.error('Error fetching userinfo:', error);\n        throw error; \n      }\n    },\n});\n\nexport const usermoneySelector = selector({\n  key: 'usermoneySelector',\n  get: async ({ get }) => {\n    const userid = get(useridState);\n    console.log(userid);\n    try {\n      const data = await fetchLoanInit(userid);\n      return data;\n    } catch (error) {\n      console.error('Error fetching userinfo: ', error);\n      throw error;\n    }\n  }\n})\n\nexport const userchasuSelector = selector({\n  key: 'userchasuSelector',\n  get: async ({get}) => {\n    const userid = get(useridState);\n    const chasu = get(chasuState);\n    if(userid){\n    try {\n      const data = await fetchChasuData(userid,chasu);\n      return data;\n    } catch (error) {\n      console.error('Error fetching chasu: ',error);\n      throw error;\n    }}\n  }\n})\n\n\n// src/utils/selector.js\n\nexport const namesearchSelector = selector({\n  key: 'namesearchSelector',\n  get: async ({ get }) => {\n    const username = get(searchnameState);\n    const usernumber = get(searchnumberState);\n\n    try {\n      let dataByName = [];\n      let dataByNumber = [];\n\n      if (usernumber) {\n        dataByNumber = await fetchNumberSearch(usernumber); // `usernumber` 전달\n      }\n\n      if (username) {\n        dataByName = await fetchNameSearch(username);\n      }\n\n      if (username && usernumber) {\n        // 두 결과의 교집합 반환\n        const numberIds = new Set(dataByNumber.map(user => user.id));\n        const filteredByName = dataByName.filter(user => numberIds.has(user.id));\n        return filteredByName;\n      }\n\n      if (usernumber) {\n        return dataByNumber;\n      }\n\n      if (username) {\n        return dataByName;\n      }\n\n      // `username`과 `usernumber`가 모두 비어 있을 때 모든 데이터를 반환\n      const allData = await fetchNumberSearch(''); // 빈 문자열을 전달하여 모든 데이터를 가져옴\n      return allData;\n    } catch (error) {\n      console.error(\"namesearchSelector 오류:\", error);\n      throw error;\n    }\n  }\n});\n"
    },
    "context": {
        "__files__": {
            "AuthContext.js": "'use client'\nimport React, { createContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('username');\n    if (token) {\n      setIsLoggedIn(true);\n      setUsername(user);\n    }\n  }, []);\n\n  const login = (username, token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('username', username);\n    setIsLoggedIn(true);\n    setUsername(username);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    setIsLoggedIn(false);\n    setUsername('');\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, username, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"
        }
    },
    "hoc": {
        "__files__": {
            "withAuth.js": "// 'hoc/withAuth.js'\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nconst withAuth = (WrappedComponent) => {\n  return (props) => {\n    const router = useRouter();\n\n    useEffect(() => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        router.push(\"/login\");\n      }\n    }, []);\n\n    return <WrappedComponent {...props} />;\n  };\n};\n\nexport default withAuth;\n"
        }
    }
}